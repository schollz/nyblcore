// Sampler Player
// InA() -> selects sample
// InB() -> gates
// InK() -> also selects sample

// make breakbeat

#include <EEPROM.h>


#ifndef JERBOA_H_
#define JERBOA_H_

#ifndef MOC_EXTRA_LOOP_COUNT
#define MOC_EXTRA_LOOP_COUNT 0
#endif

#ifndef MOC_TICKS
#define MOC_TICKS 0
#endif

#ifndef WHICH_PWM
#define WHICH_PWM 1  /* 1 or 4 */
#endif

#ifndef WHICH_LED
#define WHICH_LED 0
#endif

// ATtiny{25,45,85}
//
//         +--u--+
//       x |R   V| x
//   (3) 3 |A   K| 2 (1)
//   (2) 4 |B   F| 1
//       x |G   L| 0
//         +-----+
//  (ADC)          PB

extern void Setup(void);
extern void Loop(void);

namespace jerboa_internal {

volatile word spin_tmp;
void SpinDelay(word n) {
  for (word i = 0; i < n; i++) {
    for (word j = 0; j < 100; j++) {
      spin_tmp += j;
    }
  }
}
void SpinDelayFast(word n) {
  for (word i = 0; i < n; i++) {
      spin_tmp += i;
  }
}

const PROGMEM char MoctalTick_GapFollows[] = {0/*unused*/,  0,0, 0,0,0, 0,0,1};

bool led;
void LedOn() { led = true; digitalWrite(WHICH_LED, HIGH); }    // Set low bit; other bits are pullups.
void LedOff() { led = false; digitalWrite(WHICH_LED, LOW); }  // Clear low bit; other bits are pullups.
void LedToggle() { if (led) LedOff(); else LedOn(); }
void LedSet(bool value) { if (value) LedOn(); else LedOff(); }

// Fault(n) stops everything else and makes flashy pulses in groups of n.
void Fault(byte n) {
  cli(); // No more interrupts.
  USICR = 0;
  pinMode(WHICH_LED, OUTPUT);
  while (true) {
    for (byte k = 0; k < n; k++) {
    for (word i = 0; i < 8; i++) {
      SpinDelay(400);
    LedOn();
    SpinDelay(100);
    LedOff();
  }
  SpinDelay(5000);
    }
    SpinDelay(8000);
  }
}

struct MoctalTicker {
  
  // You must zero these yourself, if not global.
  volatile byte data;     // Number to ouptut.
  volatile byte shifted;  // High bit is output; shifts to the left.
  volatile byte tick;     // Counts within states.
  volatile byte state;    // Counts bits and gaps.
  // volatile byte data_last;

  static void Setup() {
    pinMode(WHICH_LED, OUTPUT);
  }  

  void Tick() {
    if (tick == 0) {
      // MOVE
      if (state==0 || state==8) {
        shifted = data;
        state = 1;
      } else {
        shifted <<= 1;
        ++state;
      }
      
      if (shifted & 0x80) {
        tick = 5;  // Long pulse.
      } else {
        tick = 2;  // Short pulse.
      }
      
      if (pgm_read_byte(MoctalTick_GapFollows+state)) {
        tick += 2;  // Pulse followed by longer gap.
      }
    }
    
    if (tick > (pgm_read_byte(MoctalTick_GapFollows+state) ? 3 : 1)) {
      LedOn();
    } else {
      LedOff();
    }
    tick--;
  }
};
MoctalTicker moc;

// Timer/Counter 1 PWM Output OC1A (PB1)
struct FastPwm1Base {
  static void SetupPLL() {
    // de https://github.com/viking/attiny85-player //
    PLLCSR |= _BV(PLLE);               // Enable 64 MHz PLL (p94)
    SpinDelay(1); /// delayMicroseconds(100);            // Stabilize
    while(!(PLLCSR & _BV(PLOCK)));     // Wait for it... (p94)
    PLLCSR |= _BV(PCKE);               // Timer1 source = PLL
  };
};
struct FastPwm1A : public FastPwm1Base {
  static void Setup() {
    SetupPLL();
  
    // Set up Timer/Counter1 for PWM output
    TIMSK  = 0;                        // Timer interrupts OFF (p92)
    TCCR1  = _BV(PWM1A)                // Pulse Width Modulator A Enable. (p89)
           | _BV(COM1A1)               // Clear OC1A on match; set on count $00.
           | _BV(CS10);                // 1:1 prescale (p89)
    GTCCR  = 0;                        // Do not enable PW Modulater B. (p90)
    OCR1C  = 255;                      // Full 8-bit PWM cycle (p92)
    OCR1B  = 0;                        // Not used.
    OCR1A  = 128;                      // 50% duty at start

    pinMode(1, OUTPUT);                // Enable PWM output OC1A on pin PB1.
  }
  static void Output(int x) {
    OCR1A = x;  // (p92)
  }
};

struct FastPwm1B : public FastPwm1Base {
  static void Setup() {
    SetupPLL();
  
    // Set up Timer/Counter1 for PWM output
    TIMSK  = 0;                        // Timer interrupts OFF (p92)
    GTCCR  = _BV(PWM1B)                // Pulse Width Modulator B Enable. (p89)
           | _BV(COM1B1);              // Clear OC1B on match; set on count $00 (p86).
    TCCR1  = _BV(CS10);                // Do not enable PW Modulater A. 1:1 prescale. (p89)
    OCR1C  = 255;                      // Full 8-bit PWM cycle (p92)
    OCR1A  = 128;                      // Not used.
    OCR1B  = 128;                      // 50% duty at start

    pinMode(4, OUTPUT);                // Enable PWM output OC1B on pin PB4.
  }
  static void Output(int x) {
    OCR1B = x;  // (p92)
  }
};

struct AnalogIn {
  static void NextInputA() {
    ADMUX = 0 |    // Use Vcc for Reference; disconnect from PB0 (p134)
            _BV(ADLAR) | // Left-Adjust the ADC Result in ADCH (p134)
            3;     // ADC3 is PB3 is A.
  }
  static void NextInputB() {
    ADMUX = 0 |    // Use Vcc for Reference; disconnect from PB0 (p134)
            _BV(ADLAR) | // Left-Adjust the ADC Result in ADCH (p134)
            2;     // ADC2 is PB4 is B.
  }
  static void NextInputK() {
    ADMUX = 0 |    // Use Vcc for Reference; disconnect from PB0 (p134)
            _BV(ADLAR) | // Left-Adjust the ADC Result in ADCH (p134)
            1;     // ADC1 is PB2 is K.
  }
  static void Setup() {
    ADCSRA = _BV(ADEN);  // Enable ADC first.
    
    NextInputA();
            
    ADCSRB = 0; // free-running ADC; not Bipolar; not reversed. (p137)

    // (p125) max ADC res: clock 50kHz to 200kHz
    // If less than 10 bits, 200khz to 1MHz.
    // We use internal 16MHz clock, so try dividing by 32.
    // 1->/2 2->/4 3->/8 4->/16 5->/32 6->/64 7->/128  (p136)
    // 7->4.88kHz   6->9.75kHz  5->19.53kHz Nyquist (freq of LED 2xToggle)  
    // Use 6:   16MHz / 64 => 250kHz.    
    // 250kHz / 13 => 19,230 samples per sec; nyquist 9615 Hz
    // Use 5: Can do two samples, 9615 Hz.
#define DIVISOR 5
    byte tmp = _BV(ADEN) |  // Enable the Analog-to-Digital converter (p136)
              _BV(ADATE) |  // Enable ADC auto trigger
              _BV(ADIE) |  // Enable interrupt on Conversion Complete
              DIVISOR;
    // ADCSRA = tmp;
    ADCSRA = tmp | _BV(ADSC);  // Start the fist conversion
  }
  static byte Input() {
    return ADCH;   // Just 8-bit.  Assumes ADLAR is 1. 
  }
};

#if WHICH_PWM == 1
FastPwm1A pwm;
#else
FastPwm1B pwm;
#endif

volatile byte AnalogA, AnalogB, AnalogK;
AnalogIn in;
volatile byte adc_counter;
volatile bool adc_switch;

ISR(ADC_vect) {
  if (adc_switch) {
    ++adc_counter;
    adc_switch = false;
    // One time out of 256 we sample K.  The rest we sample B.
    if (adc_counter == 2) {
      AnalogB = ADCH;          // on 2, we still save B, but request K next.
      AnalogIn::NextInputK();
    } else if (adc_counter == 3) {
      AnalogK = ADCH;          // on 3, we save K, but request B again.
      AnalogIn::NextInputB();
    } else {
      AnalogB = ADCH;
      AnalogIn::NextInputB();
    }
  } else {
    adc_switch = true;
    AnalogA = ADCH;
    AnalogIn::NextInputA();
  }
}

void setup() {
  pinMode(0, INPUT_PULLUP);
  pinMode(1, INPUT_PULLUP);
  pinMode(2, INPUT_PULLUP);
  pinMode(3, INPUT_PULLUP);
  pinMode(4, INPUT_PULLUP);
  pinMode(5, INPUT_PULLUP);
  pinMode(WHICH_LED, OUTPUT);
  pinMode(WHICH_PWM, OUTPUT);
  LedOff();

  pwm.Setup();
  in.Setup();
  // moc.Setup();
  // moc.data = 0;

  ::Setup();  // Call user's Setup.
}

void loop() {
  // no need to return; just loop here.
  while (true) {

    // Wait for the next Analog sample in.
    {
      byte old_counter = adc_counter;
      byte c;
#if MOC_EXTRA_LOOP_COUNT 
      word loops = 0;
#endif
      do {
#if MOC_EXTRA_LOOP_COUNT 
        ++loops;
#endif
        c = adc_counter;
      } while (old_counter == c);
      if (byte(old_counter+1) == c) {
#if MOC_EXTRA_LOOP_COUNT 
        moc.data = loops;
#endif
      } else {
        Fault(3); // Fault on overruns.  May relax this.
      }
      old_counter=c;
    }

    ::Loop();  // Call user's Loop.

#if MOC_TICKS
    if (adc_counter == 0) {
          static byte tick_counter;
      ++tick_counter;
      if ((tick_counter & 15) == 0) {
    moc.Tick();
      }
    }
#endif

  }
}

}  // namespace

void setup() { jerboa_internal::setup(); }
void loop() { jerboa_internal::loop(); }

// public wrappers
inline byte InA()   { return jerboa_internal::AnalogA; }
inline byte InB()   { return jerboa_internal::AnalogB; }
inline byte InR()   { return jerboa_internal::AnalogK; }  // R was old name for K.
inline byte InK()   { return jerboa_internal::AnalogK; }
inline void OutF(byte b) { jerboa_internal::pwm.Output(b); }
inline void Moctal(byte b)  { jerboa_internal::moc.data = b; }

#define IN_A()   (jerboa_internal::AnalogA)
#define IN_B()   (jerboa_internal::AnalogB)
#define IN_R()   (jerboa_internal::AnalogK)  // R was old name for K.
#define IN_K()   (jerboa_internal::AnalogK)
#define OUT_F(B) (jerboa_internal::pwm.Output(B))
#define MOCTAL(B)  (jerboa_internal::moc.data = (B))

using jerboa_internal::LedOn;
using jerboa_internal::LedOff;
using jerboa_internal::LedToggle;
using jerboa_internal::LedSet;
using jerboa_internal::Fault;
using jerboa_internal::SpinDelay;
using jerboa_internal::SpinDelayFast;

#endif



namespace jerboa_random {

typedef struct rc4_key
{      
     unsigned char state[256];      
     unsigned char x;        
     unsigned char y;
} rc4_key;

void swap_byte(unsigned char *a, unsigned char *b)
{
     unsigned char swapByte;
     
     swapByte = *a;
     *a = *b;      
     *b = swapByte;
}

void prepare_key(unsigned char *key_data_ptr, int key_data_len, rc4_key *key)
{
     unsigned char swapByte;
     unsigned char index1;
     unsigned char index2;
     unsigned char* state;
     short counter;    
     
     state = &key->state[0];        
     for(counter = 0; counter < 256; counter++)              
     state[counter] = counter;              
     key->x = 0;    
     key->y = 0;    
     index1 = 0;    
     index2 = 0;            
     for(counter = 0; counter < 256; counter++)      
     {              
          index2 = (key_data_ptr[index1] + state[counter] +
index2) % 256;                
          swap_byte(&state[counter], &state[index2]);            

          index1 = (index1 + 1) % key_data_len;  
     }      
 }
 
void rc4(unsigned char *buffer_ptr, int buffer_len, rc4_key *key)
{
     unsigned char x;
     unsigned char y;
     unsigned char* state;
     unsigned char xorIndex;
     short counter;              
     
     x = key->x;    
     y = key->y;    
     
     state = &key->state[0];        
     for(counter = 0; counter < buffer_len; counter ++)      
     {              
          x = (x + 1) % 256;                      
          y = (state[x] + y) % 256;              
          swap_byte(&state[x], &state[y]);                        
               
          xorIndex = state[x] + (state[y]) % 256;                
               
          buffer_ptr[counter] ^= state[xorIndex];        
      }              
      key->x = x;    
      key->y = y;
}
 
rc4_key Engine;

}

void RandomSetup() {
  jerboa_random::prepare_key("RandomSetup", 12, &jerboa_random::Engine);
}

byte RandomByte() {
  unsigned char buf[1] = {0};
  jerboa_random::rc4(buf, 1, &jerboa_random::Engine);
  return buf[0];
}





#ifndef SAMPLE_TABLE_H_
#define SAMPLE_TABLE_H_

#define NUM_SAMPLES 5
#define SAMPLE_SIZE 880
#define TOTAL_SAMPLES 4400

const word retrigs[] = {
  7040,3520,2640,1760,880,440,293
};
const word pos[] = {
    0,880,1760,2640,3520,4400
};
const byte SAMPLE_TABLE[] PROGMEM = {
  128,
126,
126,
126,
126,
119,
96,
105,
140,
176,
199,
195,
176,
145,
108,
71,
41,
21,
14,
19,
33,
53,
82,
116,
154,
193,
230,
237,
234,
231,
230,
230,
233,
216,
176,
139,
102,
71,
41,
15,
16,
24,
28,
33,
34,
37,
38,
41,
41,
57,
100,
139,
167,
189,
206,
225,
238,
238,
236,
232,
230,
227,
225,
224,
224,
225,
225,
214,
188,
161,
130,
103,
81,
64,
47,
29,
19,
18,
17,
16,
16,
17,
17,
18,
19,
20,
20,
21,
21,
29,
47,
65,
87,
110,
137,
163,
186,
207,
226,
237,
241,
241,
242,
244,
244,
245,
245,
244,
244,
242,
241,
240,
239,
238,
238,
229,
211,
191,
168,
143,
113,
87,
61,
40,
23,
19,
20,
18,
18,
18,
16,
15,
16,
15,
16,
15,
16,
16,
16,
17,
18,
22,
39,
55,
69,
85,
104,
125,
147,
168,
185,
198,
208,
216,
224,
232,
234,
235,
236,
236,
236,
238,
238,
239,
238,
239,
239,
239,
239,
239,
238,
238,
234,
225,
218,
210,
201,
192,
181,
165,
148,
130,
112,
93,
77,
63,
50,
38,
27,
18,
15,
16,
16,
15,
15,
15,
15,
14,
14,
15,
14,
14,
14,
14,
14,
13,
18,
28,
40,
52,
66,
82,
99,
119,
138,
157,
174,
191,
206,
218,
228,
238,
244,
245,
244,
244,
243,
243,
243,
243,
243,
244,
244,
245,
246,
242,
238,
232,
227,
220,
212,
204,
195,
186,
177,
167,
157,
147,
135,
126,
115,
104,
95,
86,
77,
70,
63,
56,
48,
43,
35,
30,
25,
21,
18,
15,
13,
11,
11,
10,
10,
12,
14,
17,
21,
25,
31,
40,
47,
57,
67,
78,
89,
101,
112,
124,
136,
148,
160,
172,
182,
193,
203,
212,
220,
228,
234,
239,
242,
244,
244,
245,
242,
242,
238,
234,
229,
225,
219,
213,
206,
200,
193,
185,
177,
170,
163,
154,
147,
140,
133,
126,
119,
112,
105,
98,
92,
86,
80,
74,
69,
63,
58,
54,
49,
45,
42,
39,
37,
35,
33,
32,
33,
32,
34,
35,
38,
40,
44,
49,
53,
58,
64,
70,
78,
85,
94,
101,
110,
118,
126,
136,
144,
153,
161,
170,
178,
186,
193,
199,
204,
210,
215,
218,
221,
224,
225,
225,
226,
225,
224,
220,
219,
216,
211,
206,
203,
196,
190,
184,
178,
171,
165,
157,
150,
143,
136,
129,
122,
115,
110,
104,
98,
94,
88,
84,
80,
76,
72,
70,
67,
65,
64,
63,
61,
61,
61,
61,
62,
63,
64,
66,
68,
71,
73,
75,
78,
81,
85,
89,
93,
96,
101,
105,
109,
114,
119,
122,
128,
133,
137,
144,
149,
153,
156,
161,
163,
165,
168,
169,
171,
172,
172,
172,
172,
172,
172,
171,
170,
170,
169,
167,
165,
163,
161,
161,
159,
157,
153,
151,
148,
145,
142,
139,
135,
132,
129,
127,
124,
121,
118,
115,
113,
111,
108,
106,
104,
103,
101,
100,
100,
99,
100,
101,
101,
101,
102,
103,
104,
106,
108,
109,
110,
112,
114,
116,
118,
120,
121,
123,
125,
126,
129,
130,
131,
132,
134,
135,
136,
138,
139,
141,
142,
142,
143,
144,
144,
145,
144,
143,
143,
143,
142,
140,
139,
138,
136,
134,
131,
130,
129,
127,
126,
124,
123,
122,
120,
121,
119,
119,
118,
119,
118,
117,
117,
116,
118,
117,
118,
119,
119,
119,
120,
120,
122,
123,
123,
125,
125,
127,
128,
128,
130,
131,
131,
132,
133,
134,
135,
136,
135,
136,
136,
136,
137,
137,
138,
138,
138,
138,
138,
138,
138,
137,
137,
137,
137,
137,
137,
136,
136,
135,
135,
135,
134,
134,
134,
132,
132,
132,
131,
131,
130,
130,
129,
127,
127,
125,
125,
124,
123,
121,
121,
119,
118,
117,
117,
115,
115,
115,
115,
114,
114,
115,
115,
115,
115,
115,
116,
117,
118,
119,
120,
121,
121,
123,
124,
125,
126,
127,
129,
129,
130,
131,
133,
133,
134,
134,
135,
136,
136,
136,
136,
138,
137,
137,
137,
137,
136,
136,
137,
135,
136,
134,
135,
134,
134,
133,
133,
133,
132,
132,
131,
131,
130,
131,
130,
129,
129,
129,
128,
128,
127,
127,
126,
126,
126,
125,
126,
126,
126,
126,
127,
127,
127,
126,
126,
127,
127,
127,
127,
128,
128,
128,
128,
128,
128,
128,
128,
127,
128,
128,
127,
126,
126,
127,
127,
126,
126,
126,
125,
124,
124,
124,
123,
123,
124,
123,
123,
122,
122,
123,
122,
122,
122,
124,
123,
124,
124,
124,
125,
125,
125,
126,
128,
127,
129,
130,
130,
130,
132,
132,
132,
133,
133,
134,
135,
136,
136,
137,
137,
137,
138,
138,
137,
137,
137,
137,
136,
136,
135,
134,
135,
134,
132,
132,
131,
131,
130,
130,
129,
128,
127,
127,
126,
125,
125,
124,
123,
123,
123,
122,
122,
122,
123,
121,
122,
122,
121,
122,
122,
122,
122,
123,
124,
124,
124,
124,
125,
125,
125,
126,
126,
126,
127,
126,
127,
128,
128,
128,
128,
128,
128,
128,
128,
128,
128,
128,
128,
128,
129,
129,
129,
129,
128,
129,
129,
129,
129,
128,
129,
129,
129,
129,
129,
129,
128,
129,
129,
128,
130,
128,
130,
129,
129,
129,
130,
130,
129,
129,
129,
129,
128,
129,
129,
130,
129,
130,
128,
130,
126,
116,
124,
131,
133,
135,
135,
134,
132,
133,
130,
131,
129,
133,
120,
122,
138,
116,
128,
131,
130,
133,
124,
125,
128,
122,
123,
128,
127,
128,
126,
127,
123,
124,
125,
122,
123,
125,
123,
129,
125,
128,
128,
129,
128,
128,
129,
126,
130,
126,
126,
128,
128,
126,
129,
128,
129,
128,
130,
129,
130,
132,
131,
130,
130,
131,
131,
131,
129,
131,
130,
131,
131,
129,
131,
130,
129,
129,
131,
128,
129,
129,
130,
126,
129,
129,
126,
128,
127,
127,
127,
126,
127,
127,
126,
125,
125,
127,
127,
128,
126,
129,
127,
127,
128,
127,
127,
126,
128,
128,
129,
128,
127,
128,
130,
128,
128,
127,
129,
129,
128,
128,
128,
127,
127,
127,
127,
127,
127,
127,
127,
128,
127,
127,
127,
129,
126,
128,
127,
127,
127,
126,
127,
127,
127,
128,
128,
128,
128,
128,
128,
128,
129,
128,
129,
129,
129,
130,
129,
129,
129,
129,
127,
128,
129,
129,
129,
128,
129,
129,
130,
129,
128,
130,
130,
129,
129,
128,
128,
127,
128,
128,
129,
128,
128,
128,
128,
129,
129,
128,
129,
128,
127,
128,
128,
128,
128,
127,
127,
128,
127,
127,
127,
128,
128,
127,
127,
128,
128,
129,
128,
128,
128,
129,
128,
128,
128,
129,
128,
129,
129,
129,
129,
128,
128,
128,
129,
129,
127,
127,
129,
128,
128,
127,
128,
127,
127,
128,
127,
128,
128,
128,
128,
127,
128,
127,
128,
128,
127,
127,
127,
128,
127,
128,
127,
127,
127,
127,
128,
128,
128,
128,
129,
127,
129,
128,
129,
127,
128,
127,
128,
127,
128,
128,
129,
128,
129,
128,
128,
129,
128,
129,
128,
129,
129,
128,
127,
128,
129,
129,
129,
128,
129,
128,
128,
128,
129,
128,
128,
129,
127,
128,
128,
128,
126,
128,
128,
128,
128,
128,
128,
128,
128,
128,
129,
129,
130,
130,
129,
129,
128,
128,
127,
129,
128,
126,
129,
128,
128,
128,
128,
127,
127,
128,
128,
127,
128,
127,
127,
129,
128,
129,
129,
128,
129,
128,
128,
128,
127,
128,
128,
129,
127,
127,
127,
127,
127,
128,
128,
128,
128,
127,
128,
128,
128,
128,
129,
129,
128,
128,
128,
127,
129,
128,
128,
128,
127,
128,
128,
127,
127,
126,
127,
128,
126,
128,
129,
128,
128,
129,
128,
128,
129,
129,
129,
128,
128,
127,
129,
127,
126,
128,
128,
127,
128,
129,
129,
130,
129,
131,
130,
131,
129,
129,
129,
128,
128,
129,
128,
128,
128,
128,
127,
128,
129,
128,
129,
127,
129,
128,
128,
128,
127,
128,
127,
128,
128,
129,
129,
128,
128,
129,
130,
129,
128,
129,
128,
128,
128,
128,
127,
127,
127,
126,
127,
126,
127,
127,
127,
127,
127,
128,
128,
128,
128,
127,
128,
128,
128,
127,
128,
128,
128,
127,
129,
128,
128,
128,
128,
127,
128,
129,
129,
128,
128,
127,
128,
127,
127,
128,
128,
127,
127,
128,
128,
128,
127,
128,
128,
129,
128,
128,
129,
129,
128,
128,
129,
129,
128,
128,
129,
129,
128,
129,
128,
129,
128,
129,
128,
129,
129,
129,
129,
129,
128,
128,
129,
129,
128,
129,
128,
129,
129,
130,
129,
129,
129,
129,
129,
128,
128,
128,
128,
128,
128,
128,
128,
128,
127,
128,
127,
127,
128,
127,
127,
127,
127,
127,
127,
126,
127,
128,
127,
127,
127,
127,
128,
128,
128,
127,
127,
128,
127,
127,
128,
128,
128,
127,
127,
128,
127,
128,
128,
128,
128,
128,
128,
128,
129,
127,
129,
128,
129,
128,
128,
128,
127,
128,
128,
129,
128,
129,
127,
128,
128,
129,
128,
129,
130,
129,
130,
129,
129,
127,
128,
128,
128,
128,
128,
129,
129,
129,
129,
130,
129,
129,
130,
130,
130,
130,
129,
129,
129,
128,
129,
129,
129,
129,
129,
128,
129,
128,
128,
128,
128,
128,
128,
129,
130,
129,
129,
127,
128,
127,
128,
128,
128,
128,
127,
128,
128,
128,
127,
127,
128,
128,
128,
128,
127,
127,
127,
126,
126,
127,
127,
127,
127,
126,
127,
127,
127,
128,
127,
126,
127,
127,
128,
127,
127,
126,
127,
127,
127,
127,
127,
127,
126,
128,
128,
128,
128,
128,
128,
129,
129,
129,
130,
129,
130,
129,
128,
128,
129,
129,
129,
129,
129,
130,
129,
130,
129,
129,
129,
128,
129,
129,
128,
129,
128,
129,
128,
128,
128,
128,
128,
129,
128,
129,
128,
128,
129,
128,
127,
128,
128,
128,
129,
128,
128,
129,
128,
129,
128,
128,
127,
129,
128,
129,
129,
127,
129,
128,
128,
128,
128,
128,
128,
128,
127,
128,
128,
127,
128,
127,
127,
128,
128,
127,
127,
128,
127,
127,
128,
128,
127,
127,
127,
128,
127,
128,
127,
128,
127,
128,
128,
127,
128,
128,
128,
127,
128,
127,
128,
128,
128,
128,
128,
128,
127,
128,
128,
128,
128,
129,
128,
128,
128,
129,
128,
128,
128,
129,
129,
129,
128,
128,
129,
128,
129,
129,
128,
128,
128,
129,
128,
129,
129,
128,
129,
129,
130,
129,
129,
128,
129,
129,
129,
128,
129,
129,
129,
128,
129,
128,
129,
129,
129,
128,
128,
127,
127,
127,
127,
128,
127,
128,
127,
128,
126,
128,
126,
128,
128,
128,
127,
128,
126,
128,
127,
127,
128,
128,
127,
128,
128,
127,
129,
128,
129,
128,
130,
126,
130,
123,
131,
125,
132,
125,
130,
122,
121,
120,
129,
131,
126,
174,
133,
137,
161,
127,
65,
48,
28,
99,
128,
157,
253,
217,
193,
208,
145,
65,
57,
28,
20,
16,
69,
145,
210,
229,
227,
213,
152,
160,
169,
141,
170,
148,
127,
133,
108,
95,
44,
28,
44,
37,
56,
132,
186,
168,
175,
175,
128,
157,
165,
127,
117,
126,
125,
106,
121,
99,
73,
84,
87,
72,
102,
128,
122,
137,
147,
179,
187,
182,
167,
151,
141,
115,
113,
127,
113,
98,
94,
99,
120,
93,
131,
164,
135,
135,
175,
183,
161,
178,
176,
134,
119,
123,
108,
103,
98,
120,
130,
125,
111,
122,
146,
125,
136,
147,
135,
123,
146,
164,
144,
136,
150,
124,
102,
106,
118,
135,
111,
122,
111,
96,
101,
114,
140,
127,
127,
146,
145,
142,
145,
153,
133,
103,
89,
97,
120,
114,
132,
141,
131,
110,
127,
141,
110,
103,
124,
124,
114,
141,
149,
149,
142,
125,
117,
112,
115,
120,
116,
125,
141,
142,
127,
117,
128,
125,
96,
102,
129,
139,
144,
160,
159,
160,
146,
123,
106,
105,
119,
114,
114,
122,
131,
132,
140,
140,
138,
140,
127,
117,
127,
136,
138,
137,
140,
138,
112,
109,
119,
131,
131,
129,
133,
134,
139,
132,
131,
141,
132,
117,
114,
128,
129,
132,
135,
129,
132,
123,
125,
124,
121,
127,
134,
123,
127,
144,
130,
136,
144,
140,
132,
117,
119,
122,
119,
125,
119,
111,
117,
123,
126,
135,
133,
136,
143,
132,
138,
139,
131,
131,
123,
117,
112,
108,
116,
128,
126,
125,
135,
137,
131,
130,
136,
133,
126,
135,
130,
122,
128,
120,
122,
121,
120,
121,
117,
123,
123,
128,
134,
132,
133,
133,
131,
133,
133,
129,
128,
126,
127,
129,
129,
127,
124,
119,
115,
120,
126,
128,
131,
129,
132,
136,
132,
129,
127,
130,
132,
131,
128,
130,
131,
125,
122,
124,
127,
125,
128,
125,
127,
134,
132,
130,
131,
131,
127,
126,
130,
125,
122,
125,
129,
127,
132,
133,
129,
133,
132,
133,
123,
123,
128,
129,
126,
121,
129,
128,
125,
129,
129,
134,
134,
133,
136,
138,
138,
133,
133,
125,
117,
118,
113,
111,
117,
117,
121,
129,
137,
138,
138,
141,
143,
140,
133,
135,
141,
136,
129,
126,
120,
117,
116,
115,
116,
114,
119,
122,
127,
127,
130,
132,
131,
134,
138,
139,
138,
139,
135,
134,
132,
130,
127,
121,
114,
116,
118,
117,
119,
119,
122,
131,
139,
139,
138,
136,
137,
135,
130,
125,
123,
127,
127,
123,
124,
121,
123,
124,
126,
131,
135,
136,
133,
133,
132,
134,
133,
125,
124,
124,
123,
124,
127,
129,
123,
122,
124,
124,
125,
126,
126,
125,
133,
133,
133,
136,
136,
134,
132,
130,
127,
122,
118,
119,
121,
121,
127,
128,
127,
130,
131,
133,
134,
133,
130,
129,
130,
129,
125,
125,
126,
124,
124,
125,
125,
128,
131,
131,
131,
131,
129,
129,
130,
128,
128,
128,
128,
131,
133,
134,
132,
127,
122,
121,
124,
123,
124,
123,
125,
127,
129,
130,
129,
131,
133,
133,
134,
135,
132,
128,
126,
123,
120,
122,
123,
125,
128,
130,
130,
132,
132,
133,
131,
129,
128,
126,
126,
127,
128,
130,
130,
130,
127,
124,
125,
125,
124,
125,
127,
128,
128,
127,
127,
129,
131,
131,
132,
132,
131,
132,
132,
131,
127,
123,
121,
120,
119,
123,
125,
127,
129,
130,
131,
132,
135,
136,
135,
134,
133,
131,
128,
126,
125,
125,
125,
123,
125,
126,
124,
126,
126,
127,
127,
128,
128,
131,
131,
132,
131,
131,
130,
130,
128,
125,
124,
124,
125,
125,
126,
128,
127,
127,
129,
131,
130,
131,
130,
131,
130,
130,
130,
127,
123,
123,
124,
125,
126,
128,
129,
131,
133,
132,
131,
129,
130,
129,
128,
129,
127,
128,
128,
125,
124,
124,
125,
127,
127,
127,
129,
129,
130,
132,
131,
129,
128,
130,
130,
130,
128,
126,
127,
127,
127,
127,
126,
126,
126,
129,
130,
129,
130,
129,
130,
131,
130,
127,
126,
127,
127,
128,
126,
124,
123,
125,
127,
129,
129,
131,
131,
132,
132,
132,
130,
129,
127,
126,
127,
126,
125,
125,
126,
126,
126,
126,
126,
126,
128,
130,
130,
129,
130,
131,
130,
129,
125,
126,
126,
127,
128,
128,
129,
129,
128,
128,
128,
128,
128,
128,
129,
129,
129,
131,
131,
128,
126,
126,
125,
125,
126,
127,
127,
125,
125,
128,
129,
129,
130,
130,
128,
129,
129,
131,
131,
131,
130,
127,
126,
127,
128,
127,
128,
127,
128,
129,
129,
131,
130,
126,
126,
126,
127,
127,
129,
129,
129,
129,
128,
127,
125,
126,
128,
129,
130,
129,
128,
129,
128,
127,
127,
126,
127,
127,
128,
129,
130,
128,
129,
129,
128,
126,
126,
128,
129,
128,
129,
129,
128,
127,
128,
128,
129,
127,
127,
129,
128,
129,
129,
127,
127,
128,
128,
130,
129,
128,
128,
127,
127,
128,
125,
124,
126,
127,
128,
128,
129,
129,
129,
129,
130,
128,
128,
129,
130,
130,
128,
129,
128,
126,
125,
126,
125,
127,
128,
128,
128,
128,
127,
126,
126,
128,
128,
128,
128,
128,
128,
128,
128,
129,
129,
128,
129,
128,
128,
128,
128,
128,
126,
128,
128,
128,
130,
127,
127,
128,
128,
127,
127,
128,
128,
127,
129,
128,
128,
127,
128,
128,
128,
129,
129,
128,
130,
130,
128,
127,
129,
128,
128,
127,
126,
131,
129,
131,
129,
127,
129,
128,
127,
128,
128,
128,
127,
128,
128,
127,
128,
127,
129,
128,
129,
128,
128,
129,
130,
127,
128,
127,
127,
128,
128,
141,
126,
117,
127,
118,
123,
132,
129,
129,
130,
126,
127,
130,
130,
133,
126,
123,
122,
127,
129,
133,
129,
124,
128,
132,
130,
133,
126,
122,
133,
127,
129,
134,
127,
129,
129,
125,
132,
128,
122,
123,
127,
127,
131,
128,
127,
126,
129,
131,
125,
130,
128,
132,
130,
122,
130,
126,
130,
132,
124,
130,
126,
130,
126,
125,
130,
130,
128,
130,
128,
131,
129,
125,
129,
127,
131,
128,
128,
122,
131,
131,
125,
126,
131,
129,
127,
132,
122,
131,
128,
124,
124,
131,
134,
127,
128,
129,
123,
127,
130,
128,
128,
124,
131,
131,
128,
125,
130,
128,
126,
132,
129,
129,
133,
129,
124,
130,
124,
128,
131,
125,
127,
130,
127,
128,
127,
122,
135,
134,
123,
127,
131,
123,
131,
127,
127,
129,
132,
125,
129,
128,
125,
132,
120,
129,
130,
130,
126,
129,
128,
129,
129,
125,
130,
127,
127,
129,
130,
128,
129,
129,
122,
129,
128,
123,
129,
131,
125,
131,
132,
125,
129,
125,
122,
131,
132,
123,
131,
130,
129,
128,
125,
125,
129,
128,
129,
132,
122,
126,
128,
126,
132,
135,
124,
125,
127,
128,
128,
126,
132,
133,
127,
128,
126,
124,
132,
132,
124,
127,
135,
125,
128,
126,
126,
130,
132,
124,
127,
133,
122,
129,
128,
126,
133,
130,
123,
128,
133,
122,
128,
131,
125,
130,
127,
124,
130,
129,
127,
127,
126,
129,
130,
125,
126,
131,
128,
131,
128,
123,
129,
132,
125,
128,
129,
127,
128,
128,
127,
130,
130,
126,
130,
128,
124,
131,
128,
125,
134,
129,
125,
128,
129,
127,
131,
128,
126,
131,
125,
128,
129,
129,
128,
128,
126,
131,
129,
124,
129,
129,
129,
129,
126,
125,
133,
130,
123,
129,
130,
126,
132,
125,
126,
133,
127,
124,
129,
130,
126,
132,
127,
125,
130,
127,
125,
130,
127,
129,
130,
125,
127,
128,
127,
127,
129,
126,
129,
128,
127,
129,
130,
126,
128,
129,
128,
129,
126,
127,
130,
129,
126,
129,
127,
130,
130,
125,
128,
129,
127,
130,
129,
126,
128,
128,
127,
130,
130,
124,
129,
131,
126,
131,
130,
124,
130,
128,
124,
131,
130,
128,
130,
128,
122,
131,
129,
127,
129,
130,
127,
128,
129,
125,
131,
129,
125,
129,
128,
127,
127,
129,
127,
128,
128,
127,
125,
128,
129,
128,
129,
127,
125,
128,
128,
127,
128,
129,
129,
127,
128,
126,
131,
130,
124,
128,
129,
127,
130,
129,
127,
132,
129,
125,
127,
129,
127,
130,
128,
127,
131,
128,
125,
130,
129,
125,
132,
129,
126,
131,
127,
126,
132,
129,
127,
128,
127,
127,
129,
126,
129,
132,
127,
127,
127,
127,
128,
128,
127,
129,
127,
126,
128,
128,
128,
129,
125,
127,
129,
127,
129,
129,
126,
128,
128,
125,
129,
129,
127,
130,
128,
127,
130,
127,
126,
130,
129,
126,
130,
126,
126,
130,
127,
127,
131,
127,
126,
131,
127,
126,
130,
127,
127,
131,
127,
127,
130,
126,
128,
131,
126,
128,
130,
128,
126,
130,
126,
129,
129,
126,
130,
131,
127,
126,
129,
127,
128,
129,
129,
129,
128,
128,
127,
127,
130,
126,
126,
130,
130,
126,
131,
127,
126,
130,
126,
127,
131,
128,
127,
130,
126,
127,
129,
124,
130,
132,
126,
128,
129,
127,
126,
130,
128,
127,
131,
126,
124,
132,
129,
124,
132,
130,
125,
129,
125,
125,
133,
128,
125,
129,
131,
127,
126,
127,
128,
131,
130,
127,
127,
131,
130,
125,
125,
128,
129,
126,
129,
129,
127,
130,
127,
124,
129,
130,
128,
129,
127,
128,
130,
127,
126,
129,
129,
124,
129,
128,
127,
130,
127,
126,
132,
123,
126,
130,
130,
129,
127,
128,
127,
132,
124,
126,
128,
127,
129,
129,
127,
127,
129,
124,
130,
128,
130,
129,
126,
127,
129,
126,
126,
129,
129,
132,
126,
127,
127,
130,
126,
128,
127,
128,
131,
130,
125,
127,
129,
126,
129,
128,
126,
130,
131,
123,
129,
129,
127,
130,
127,
126,
130,
128,
128,
128,
127,
131,
127,
126,
127,
130,
126,
129,
129,
126,
131,
130,
126,
130,
126,
126,
129,
129,
129,
128,
128,
128,
129,
126,
127,
129,
131,
127,
127,
129,
127,
129,
131,
127,
128,
130,
126,
127,
128,
128,
129,
128,
127,
126,
130,
127,
129,
129,
126,
127,
128,
129,
128,
130,
128,
128,
128,
128,
128,
130,
128,
127,
126,
127,
128,
130,
130,
128,
128,
128,
129,
129,
130,
127,
127,
129,
128,
126,
130,
128,
130,
130,
127,
126,
129,
127,
127,
128,
127,
129,
128,
127,
128,
129,
128,
129,
128,
128,
127,
128,
127,
127,
130,
128,
129,
129,
128,
127,
129,
127,
127,
129,
127,
127,
129,
128,
128,
128,
128,
128,
129,
129,
128,
128,
127,
128,
128,
129,
128,
129,
128,
129,
129,
126,
128,
128,
129,
127,
128,
129,
129,
128,
127,
128,
128,
129,
126,
127,
129,
129,
129,
127,
128,
128,
127,
131,
128,
128,
127,
127,
129,
128,
126,
131,
127,
126,
128,
128,
127,
129,
127,
128,
128,
129,
128,
127,
128,
129,
128,
127,
129,
126,
129,
125,
131,
123,
137,
150,
145,
87,
128,
174,
106,
107,
132,
132,
135,
138,
119,
111,
132,
150,
110,
122,
135,
130,
124,
121,
133,
132,
127,
118,
130,
129,
132,
119,
128,
130,
129,
124,
128,
129,
123,
133,
125,
127,
126,
126,
128,
129,
128,
128,
129,
112,
138,
135,
127,
129,
119,
141,
121,
119,
103,
162,
150,
101,
135,
112,
148,
129,
113,
128,
137,
129,
121,
140,
111,
134,
145,
109,
116,
144,
136,
121,
129,
119,
129,
138,
129,
128,
118,
133,
130,
138,
129,
95,
147,
156,
111,
116,
132,
153,
125,
108,
135,
147,
108,
108,
171,
130,
94,
122,
136,
120,
148,
127,
114,
140,
138,
103,
116,
160,
115,
138,
147,
98,
114,
152,
150,
104,
109,
151,
131,
121,
113,
150,
127,
129,
124,
115,
152,
120,
122,
127,
135,
110,
144,
133,
130,
130,
100,
145,
144,
108,
122,
156,
122,
105,
146,
131,
122,
129,
116,
152,
119,
125,
134,
126,
124,
141,
120,
113,
135,
133,
138,
119,
132,
118,
133,
130,
129,
134,
124,
98,
165,
125,
121,
139,
112,
130,
112,
159,
113,
118,
146,
141,
108,
108,
147,
143,
115,
122,
138,
126,
125,
121,
143,
133,
102,
129,
148,
119,
129,
133,
124,
120,
132,
139,
112,
137,
145,
99,
125,
144,
130,
125,
115,
142,
140,
118,
113,
127,
142,
134,
120,
122,
134,
133,
121,
124,
129,
139,
123,
116,
143,
122,
128,
135,
125,
117,
128,
149,
114,
116,
147,
124,
129,
127,
118,
137,
126,
130,
130,
119,
126,
138,
133,
116,
126,
136,
131,
114,
130,
138,
122,
131,
128,
115,
140,
143,
105,
119,
139,
138,
122,
126,
125,
132,
130,
117,
143,
120,
124,
144,
117,
118,
143,
124,
124,
129,
133,
131,
124,
123,
130,
131,
128,
123,
127,
132,
130,
128,
125,
131,
120,
134,
128,
127,
127,
134,
129,
120,
128,
133,
130,
121,
133,
124,
134,
118,
129,
137,
124,
130,
121,
132,
134,
122,
125,
131,
133,
124,
121,
133,
129,
134,
121,
123,
133,
125,
136,
128,
119,
126,
135,
133,
125,
122,
129,
131,
133,
126,
124,
128,
127,
132,
129,
127,
129,
123,
126,
135,
125,
124,
133,
131,
125,
127,
132,
125,
129,
129,
123,
131,
129,
128,
126,
132,
124,
124,
134,
129,
124,
128,
132,
125,
131,
126,
127,
131,
123,
129,
132,
126,
128,
127,
125,
131,
130,
126,
126,
125,
132,
132,
123,
128,
130,
129,
128,
129,
127,
127,
128,
128,
129,
126,
127,
128,
129,
127,
128,
127,
124,
129,
131,
129,
127,
127,
129,
128,
129,
128,
126,
129,
128,
129,
127,
126,
129,
128,
126,
128,
130,
130,
123,
125,
131,
131,
127,
124,
130,
129,
127,
128,
129,
127,
126,
132,
129,
127,
127,
128,
129,
128,
127,
130,
127,
126,
131,
126,
126,
130,
130,
127,
126,
128,
131,
126,
125,
128,
129,
130,
127,
129,
130,
128,
127,
127,
130,
129,
126,
128,
130,
128,
127,
127,
128,
130,
127,
128,
127,
129,
129,
127,
127,
127,
128,
126,
130,
131,
126,
126,
128,
130,
129,
126,
128,
130,
127,
127,
129,
130,
127,
127,
129,
128,
128,
129,
128,
127,
128,
128,
126,
128,
129,
127,
128,
129,
127,
127,
129,
129,
129,
127,
128,
128,
127,
128,
129,
128,
128,
129,
128,
126,
128,
128,
128,
128,
127,
129,
129,
128,
127,
127,
131,
128,
128,
127,
128,
129,
130,
128,
126,
128,
128,
128,
128,
130,
128,
128,
127,
128,
128,
129,
127,
127,
128,
128,
128,
126,
127,
128,
130,
128,
127,
128,
128,
128,
127,
128,
129,
128,
127,
129,
129,
126,
129,
128,
127,
127,
128,
129,
127,
126,
128,
129,
128,
128,
126,
128,
128,
130,
128,
128,
129,
128,
128,
127,
128,
129,
128,
128,
128,
128,
128,
128,
129,
128,
128,
129,
128,
128,
128,
129,
128,
128,
128,
127,
128,
128,
128,
127,
128,
129,
129,
127,
128,
128,
127,
128,
128,
128,
127,
128,
128,
128,
128,
128,
128,
128,
128,
127,
128,
129,
127,
129,
128,
128,
129,
129,
129,
128,
128,
128,
129,
128,
128,
128,
129,
128,
127,
129,
129,
128,
127,
128,
128,
128,
128,
128,
128,
128,
128,
128,
128,
128,
128,
128,
128,
128,
128,
128,
128,
129,
128,
128,
129,
129,
128,
129,
128,
129,
128,
128,
128,
128,
128,
128,
128,
128,
128,
128,
128,
127,
129,
128,
128,
128,
129,
129,
128,
128,
128,
128,
128,
128,
128,
128,
128,
129,
128,
128,
127,
128,
128,
128,
128,
128,
128,
128,
128,
128,
127,
128,
128,
127,
128,
128,
128,
128,
128,
129,
128,
128,
128,
127,
129,
128,
128,
127,
128,
128,
129,
127,
127,
128,
128,
129,
128,
128,
128,
128,
128,
128,
127,
128,
128,
128,
128,
129,
128,
128,
128,
129,
128,
128,
128,
128,
129,
127
};
#endif


#define SHIFTY 6
#define PARM1 30
#define PARM2 220

byte distortion = 0;
byte volume_reduce = 0;  // volume 0 to 6
byte volume_mod = 0;
byte thresh_counter = 0;
byte thresh_next = 3;
byte thresh_nibble = 0;
word phase_sample = 0;
word phase_sample_last = 11;
byte select_sample = 0;
byte select_sample_start = 0;
byte select_sample_end = NUM_SAMPLES - 1;
bool direction = 1;       // 0 = reverse, 1 = forward
bool base_direction = 1;  // 0 = reverse, 1 == forward
byte retrig = 4;
byte tempo = 12;
int audio_last = 0;
int audio_next = -1;
byte audio_now = 0;
byte audio_played = 0;
char audio_add = 0;
byte stretch_amt = 0;
word stretch_add = 0;
byte knobB_last = 0;
byte knobA_last = 0;
byte knobK_last = 0;
byte probability = 30;
bool do_retrigger = false;
bool do_stutter = false;
bool do_stretch = false;
byte do_retriggerp = false;
byte do_stutterp = false;
byte do_stretchp = false;
byte bcount = 0;
byte lastMoved = 0;
bool firstrun = true;

#define NUM_TEMPOS 16
byte *tempo_steps[] = {
  (byte[]){ 0xAA, 0xAA, 0xAA, 0xAA },
  (byte[]){ 0x99, 0x99, 0x99, 0x99 },
  (byte[]){ 0x88, 0x88, 0x88, 0x88 },
  (byte[]){ 0x77, 0x77, 0x77, 0x77 },
  (byte[]){ 0x66, 0x66, 0x66, 0x66 },
  (byte[]){ 0x65, 0x65, 0x65, 0x65 },
  (byte[]){ 0x55, 0x55, 0x55, 0x55 },
  (byte[]){ 0x54, 0x54, 0x54, 0x54 },
  (byte[]){ 0x44, 0x44, 0x44, 0x44 },
  (byte[]){ 0x43, 0x44, 0x43, 0x43 },
  (byte[]){ 0x43, 0x43, 0x43, 0x43 },
  (byte[]){ 0x34, 0x34, 0x33, 0x43 },
  (byte[]){ 0x33, 0x33, 0x33, 0x33 },  // base tempo
  (byte[]){ 0x32, 0x32, 0x32, 0x32 },
  (byte[]){ 0x32, 0x22, 0x32, 0x22 },
  (byte[]){ 0x22, 0x22, 0x22, 0x22 },
};

void Setup() {
  RandomSetup();
}

void Loop() {
  byte knobA = InA();
  byte knobK = InK();
  byte knobB = InB();
  if (firstrun) {
    firstrun = false;
    tempo = EEPROM.read(0);
    delay(5);
    base_direction = EEPROM.read(1);
    delay(5);
    volume_reduce = EEPROM.read(2);
    delay(5);
    distortion = EEPROM.read(3);
    delay(5);
    probability = EEPROM.read(4);
    delay(5);
    do_stretchp = EEPROM.read(5);
    delay(5);
    do_retriggerp = EEPROM.read(6);
    delay(5);
    do_stutterp = EEPROM.read(7);
    delay(5);
    knobA_last = knobA;
    knobK_last = knobK;
    knobB_last = knobB;
  }
  bcount++;
  byte bthresh = knobA;
  if (lastMoved == 1) {
    bthresh = knobK;
  } else if (lastMoved == 2) {
    bthresh = knobB;
  }
  if (bcount < bthresh) {
    LedOn();
  } else {
    LedOff();
  }
  if (bcount == 255) {
    bcount = 0;
  }

  if (phase_sample_last != phase_sample) {
    audio_last = ((int)pgm_read_byte(SAMPLE_TABLE + phase_sample)) << SHIFTY;
    if (thresh_next > thresh_counter) {
      audio_next = ((int)pgm_read_byte(SAMPLE_TABLE + phase_sample + (direction * 2 - 1))) << SHIFTY;
      audio_next = (audio_next - audio_last) / ((int)(thresh_next - thresh_counter));
    } else {
      audio_next = 0;
    }
    audio_add = 0;
    phase_sample_last = phase_sample;
  }
  // no interpolation
  // OutF(audio_last >> SHIFTY);

  if (knobK > knobK_last + 5 || knobK < knobK_last - 5) {
    lastMoved = 1;
    knobK_last = knobK;
  }
  if (knobA > knobA_last + 5 || knobA < knobA_last - 5) {
    lastMoved = 0;
    knobA_last = knobA;
    // update the left parameter
    if (knobK < PARM1) {
      // volume
      if (knobA <= 200) {
        volume_reduce = (200 - knobA) * 10 / 200;  // 0-220 -> 10-0
        distortion = 0;
      } else {
        volume_reduce = 0;
        distortion = knobA - 200;  // 200-255 -> 0-30
      }
      EEPROM.write(2, volume_reduce);
      EEPROM.write(3, distortion);
    } else if (knobK < PARM2) {
      probability = knobA / 2;  // 0-255 -> 0-100
      EEPROM.write(4, probability);
    } else {
      do_stretchp = knobA / 2;
      EEPROM.write(5, do_stretchp);
    }
  }
  if (knobB > knobB_last + 5 || knobB < knobB_last - 5) {
    lastMoved = 2;
    knobB_last = knobB;
    // update the right parameter
    if (knobK < PARM1) {
      if (knobB < 128) {
        tempo = knobB * NUM_TEMPOS / 128;
        base_direction = 0;  // reverse
      } else {
        tempo = (knobB - 128) * NUM_TEMPOS / 128;
        base_direction = 1;  // forward
      }
      EEPROM.write(0, tempo);
      EEPROM.write(1, base_direction);
    } else if (knobK < PARM2) {
      do_retriggerp = knobB / 4;
      EEPROM.write(6, do_retriggerp);
    } else {
      do_stutterp = knobB / 4;
      EEPROM.write(7, do_stutterp);
    }
  }


  // linear interpolation with shifts
  audio_now = (audio_last + audio_add) >> SHIFTY;

  // mute audio if volume_reduce==10
  if (volume_reduce == 10) audio_now = 128;

  // if not muted, make some actions
  if (audio_now != 128) {
    // distortion / wave-folding
    if (distortion > 0) {
      if (audio_now > 128) {
        if (audio_now < (255 - distortion)) {
          audio_now += distortion;
        } else {
          audio_now = 255 - distortion;
        }
      } else {
        if (audio_now > distortion) {
          audio_now -= distortion;
        } else {
          audio_now = distortion - audio_now;
        }
      }
    }
    // reduce volume
    if ((volume_reduce + volume_mod) > 0) {
      if (audio_now > 128) {
        audio_now = ((audio_now - 128) >> (volume_reduce + volume_mod)) + 128;
      } else {
        audio_now = 128 - ((128 - audio_now) >> (volume_reduce + volume_mod));
      }
    }
  }
  // click preventer??
  if (abs(audio_now-audio_played)>32) {
    audio_now = (audio_now+audio_played)/2;
    if (abs(audio_now-audio_played)>32) {
      audio_now = (audio_now+audio_played)/2;
    }
  }
  OutF(audio_now);
  audio_played=audio_now;
  // for linear interpolation
  audio_add = audio_add + audio_next;

  thresh_counter++;
  if (thresh_counter == thresh_next) {
    thresh_counter = 0;
    thresh_nibble++;
    if (thresh_nibble >= 6) {
      thresh_nibble = 0;
    }
    thresh_next = tempo_steps[tempo - stretch_amt][thresh_nibble / 2];
    if (thresh_nibble % 2 == 0) {
      thresh_next = (byte)(thresh_next & 0xF0) >> 4;
    } else {
      thresh_next = (byte)(thresh_next & 0x0F);
    }

    // determine directions
    phase_sample += (direction * 2 - 1);
    if (phase_sample > pos[NUM_SAMPLES]) {
      phase_sample = 0;
    } else if (phase_sample < 0) {
      phase_sample = pos[NUM_SAMPLES];
    }

    if (phase_sample % retrigs[retrig] == 0) {
      // randoms
      byte r1 = RandomByte();
      byte r2 = RandomByte();
      byte r3 = RandomByte();
      byte r4 = RandomByte();

      // do stretching
      if (do_stretchp > 10) {
        do_stretch = (r1 < do_stretchp);
      } else {
        do_stretch = false;
      }
      if (do_stretch) {
        stretch_amt++;
        if (tempo - stretch_amt < 0) stretch_amt = tempo;
      } else {
        stretch_amt = 0;
      }


      if (volume_mod > 0) {
        if (volume_mod > 3 || r3 < 200) {
          volume_mod--;
        }
      } else {
        // randomize direction
        if (direction==base_direction) {
          if (r1 < probability/8) {
            direction = 1-base_direction;
          }
        } else {
          if (r1 < probability) {
            direction = base_direction;
          }          
        }

        // random retrig
        if (r2 < probability / 4) {
          retrig = 6;
        } else if (r2 < probability / 3) {
          retrig = 5;
        } else if (r2 < probability / 2) {
          retrig = 3;
        } else if (r2 < probability) {
          retrig = 2;
        } else {
          retrig = 4;
        }


        if (do_retrigger == false && do_stutter == false) {
          // select new sample based on direction
          if (direction == 1) select_sample++;
          if (direction == 0) {
            if (select_sample == 0) {
              select_sample = select_sample_end;
            } else {
              select_sample--;
            }
          }

          // make sure the new sample is not out of bounds
          if (select_sample < select_sample_start) select_sample = select_sample_end;
          if (select_sample > select_sample_end) select_sample = select_sample_start;

          // random jump
          if (r3 < probability/2) {
            thresh_next = thresh_next + ((r1 - r3) * 4 / 255);
            retrig = ((r1 - r2) * 6 / 255);
            select_sample = (r3 * NUM_SAMPLES) / 60;
          }
        }

        if (do_retriggerp > 10) {
          do_retrigger = (r4 < do_retriggerp);
        } else {
          do_retrigger = false;
        }
        if (do_retrigger) {
          retrig = 6;
          if (r2 < 120) {
            retrig = 5;
          }
        }

        if (do_stutterp > 10) {
          do_stutter = (r3 < do_stutterp);
        } else {
          do_stutter = false;
        }
        if (do_stutter) {
          if (volume_mod == 0) {
            volume_mod = r2 * 6 / 255;
            if (r3 < 120) {
              retrig = 5;
            } else {
              retrig = 6;
            }
          }
        }
      }

      // set new phase
      // if (select_sample % 2 == 0) {
      //   LedOn();
      // } else {
      //   LedOff();
      // }
      phase_sample = pos[select_sample];
    }
  }
}
